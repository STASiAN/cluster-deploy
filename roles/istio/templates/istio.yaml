---

# Mixer
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
data:
  mapping.conf: |-

---

apiVersion: v1
kind: Service
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: mixer
spec:
  ports:
  - name: tcp
    port: 9091
  - name: http-health
    port: 9093
  - name: configapi
    port: 9094
  - name: statsd-prom
    port: 9102
  - name: statsd-udp
    port: 9125
    protocol: UDP
  - name: prometheus
    port: 42422
  selector:
    istio: mixer

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: mixer
    spec:
      serviceAccountName: istio-mixer
      containers:
      - name: statsd-to-prometheus
        image: {{ k8s_istio_prometheus_statsd_exporter_image }}:{{ k8s_istio_prometheus_statsd_exporter_image_tag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9102
        - containerPort: 9125
          protocol: UDP
        args:
        - '-statsd.mapping-config=/etc/statsd/mapping.conf'
        volumeMounts:
        - name: config-volume
          mountPath: /etc/statsd
      - name: mixer
        image: {{ k8s_istio_mixer_image }}:{{ k8s_istio_mixer_image_tag }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9091
        - containerPort: 9094
        - containerPort: 42422
        args:
          - --configStoreURL=fs:///etc/opt/mixer/configroot
          - --configIdentityAttributeDomain=svc.{{ k8s_cluster_domain }}
          - --logtostderr
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
      volumes:
      - name: config-volume
        configMap:
          name: istio-mixer

---

# Pilot service for discovery
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio
  namespace: {{ k8s_istio_namespace }}
data:
  mesh: |-
    authPolicy: MUTUAL_TLS
    mixerAddress: istio-mixer:9091
    discoveryAddress: istio-pilot:8080
    ingressService: istio-ingress
    statsdUdpAddress: istio-mixer:9125
    zipkinAddress: zipkin:9411

---

apiVersion: v1
kind: Service
metadata:
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: pilot
spec:
  ports:
  - port: 8080
    name: http-discovery
  - port: 8081
    name: http-apiserver
  selector:
    istio: pilot

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: pilot
    spec:
      serviceAccountName: istio-pilot
      containers:
      - name: discovery
        image: {{ k8s_istio_pilot_image }}:{{ k8s_istio_pilot_image_tag }}
        imagePullPolicy: IfNotPresent
        args:
          - discovery
          - --domain={{ k8s_istio_namespace }}.svc.{{ k8s_cluster_domain }}
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
        ports:
        - containerPort: 8080
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config-volume
          mountPath: /etc/istio/config
      volumes:
      - name: config-volume
        configMap:
          name: istio

---

# Istio ingress controller with Istio auth
apiVersion: v1
kind: Service
metadata:
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}
  labels:
    istio: ingress
spec:
  type: NodePort
  ports:
  - port: 80
    nodePort: 32080
    name: http
  - port: 443
    nodePort: 32443
    name: https
  selector:
    istio: ingress

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: ingress
    spec:
      serviceAccountName: istio-ingress
      containers:
      - name: istio-ingress
        image: {{ k8s_istio_proxy_image }}:{{ k8s_istio_proxy_image_tag }}
        args: 
          - proxy
          - ingress
          - --domain={{ k8s_cluster_domain }}
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        - containerPort: 443
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - name: config-volume
          mountPath: /etc/istio/config
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.default
      - name: config-volume
        configMap:
          name: istio

---

# Istio egress envoy with Istio auth
apiVersion: v1
kind: Service
metadata:
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}
spec:
  ports:
  - port: 80
  selector:
    istio: egress

---

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}
spec:
  replicas: 1
  template:
    metadata:
      annotations:
        alpha.istio.io/sidecar: ignore
      labels:
        istio: egress
    spec:
      serviceAccountName: istio-egress
      containers:
      - name: istio-egress
        image: {{ k8s_istio_proxy_image }}:{{ k8s_istio_proxy_image_tag }}
        imagePullPolicy: IfNotPresent
        args:
          - proxy
          - egress
          - --domain={{ k8s_cluster_domain }}
          - -v
          - "{{ k8s_log_level }}"
          - --vmodule={{ k8s_log_spec }}
        ports:
        - containerPort: 80
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - mountPath: /etc/certs
          name: istio-certs
          readOnly: true
        - name: config-volume
          mountPath: /etc/istio/config
      volumes:
      - name: istio-certs
        secret:
          secretName: istio.default
      - name: config-volume
        configMap:
          name: istio
