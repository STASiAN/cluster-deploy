---

# istio-system namespace for Istio CA.
apiVersion: v1
kind: Namespace
metadata:
  name: {{ k8s_istio_namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: istio-ca
  namespace: {{ k8s_istio_namespace }}

---

# Permissions and roles for istio
# To debug: start the cluster with -vmodule=rbac,3 to enable verbose logging on RBAC DENY
# Also helps to enable logging on apiserver 'wrap' to see the URLs.
# Each RBAC deny needs to be mapped into a rule for the role.
# If using minikube, start with '--extra-config=apiserver.Authorization.Mode=RBAC'
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-pilot
rules:
- apiGroups: ["config.istio.io"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]
- apiGroups: ["istio.io"]
  resources: ["istioconfigs", "istioconfigs.istio.io"]
  verbs: ["*"]
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources", "thirdpartyresources.extensions", "ingresses", "ingresses/status"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["configmaps", "endpoints", "pods", "services"]
  verbs: ["*"]
- apiGroups: [""]
  resources: ["namespaces", "nodes", "secrets"]
  verbs: ["get", "list", "watch"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-ca
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "watch", "list", "update"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "watch", "list"]

---

# Permissions for the sidecar proxy.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-sidecar
rules:
- apiGroups: ["istio.io"]
  resources: ["istioconfigs"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["extensions"]
  resources: ["thirdpartyresources", "ingresses"]
  verbs: ["get", "watch", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps", "pods", "endpoints", "services"]
  verbs: ["get", "watch", "list"]

---

# Grant permissions to the Pilot/discovery.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-pilot-admin-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot
subjects:
- kind: ServiceAccount
  name: istio-pilot
  namespace: {{ k8s_istio_namespace }}

---

# Grant permissions to mixer.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-mixer-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot
subjects:
- kind: ServiceAccount
  name: istio-mixer
  namespace: {{ k8s_istio_namespace }}

---

# Grant permissions to the Ingress controller.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-ingress-admin-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot
subjects:
- kind: ServiceAccount
  name: istio-ingress
  namespace: {{ k8s_istio_namespace }}

---

# Grant permissions to the Egress controller.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-egress-admin-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-pilot
subjects:
- kind: ServiceAccount
  name: istio-egress
  namespace: {{ k8s_istio_namespace }}

---

# Grant permissions to the CA.
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-ca-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-ca
subjects:
- kind: ServiceAccount
  name: istio-ca
  namespace: {{ k8s_istio_namespace }}

---

# Grant permissions to the sidecar.
# TEMPORARY: the istioctl should generate a separate service account for the proxy, and permission
# granted only to that account !
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: istio-sidecar-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: istio-sidecar
subjects:
- kind: ServiceAccount
  name: default
  namespace: {{ k8s_istio_namespace }}

---

# Istio CA in istio-system namespace.
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: istio-ca
  namespace: {{ k8s_istio_namespace }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
        istio: istio-ca
    spec:
      serviceAccountName: istio-ca
      containers:
      - name: istio-ca
        image: {{ k8s_istio_ca_image }}:{{ k8s_istio_ca_image_tag }}
        imagePullPolicy: IfNotPresent
