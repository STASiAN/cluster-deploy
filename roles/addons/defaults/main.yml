---
# Helm package manager version
helm_version: 2.5.1

# It will be used as the Internal dns domain name if DNS is enabled.
# Services will be discoverable under
# <service-name>.<namespace>.svc.<domainname>.<clustername>, e.g.
# myservice.default.svc.k8s.cluster
k8s_domain_name: k8s
k8s_cluster_name: cluster
k8s_cluster_domain: '{{ k8s_domain_name }}.{{ k8s_cluster_name }}'

# Kubernetes master and services host names
k8s_master_name: master.your-domain-name
k8s_services_name: services.your-domain-name

# SSL base certificate name
# SSL folder and file names will use the same name
ssl_name: kubernetes

# Path to files with SSL certificates and keys
ssl_dir: /etc/ssl/kubernetes

# IP address of kubernetes service
# Usually it's first address in services subnet
k8s_cluster_service_ip: 10.254.0.1

# A zone is an isolated location within a region.
# Resources that live in a zone, such as instances,
# are referred to as zonal resources
gce_instances_zone: europe-west1-b

# Using of network storage
# If network storage disabled will use local disk for every requested claim 
network_storage: false

# Name of GCE persistent disk
gce_storage_name: pd-std

# Type of GCE storage, options: `slow`, `fast`
gce_storage_type: slow

# Size of GCE persistent disk in Gb
gce_storage_size: 100

k8s_kube_registry_volume_size: '{{ gce_storage_size }}Gi'
k8s_kube_registry_local_size: '5Gi'

# Kubernetes load balancer type, valid values: `gce`, `nginx`
# TODO: load balancer `gce`
k8s_lb_type: nginx 

# Container Network Interface (CNI) bin & config path
cni_bin_dir: /opt/cni/bin
cni_conf_dir: /etc/kubernetes/cni/net.d

# Kubernetes configs path
k8s_conf_dir: /etc/kubernetes
k8s_policy_dir: '{{ k8s_conf_dir }}/policy'
k8s_addons_dir: '{{ k8s_conf_dir }}/addons'

# Docker registry path in case of hostPath configuration
k8s_kube_registry_dir: /var/lib/kube-registry

# Cockroach DB data dir
k8s_cockroachdb_dir: /var/lib/cockroachdb

# Cockroach DB volume and cache size
k8s_cockroachdb_volume_size: 1Gi
k8s_cockroachdb_cache_size: 250Mb

# Nginx stats port
k8s_nginx_stats_port: 18080

# SSL certificate and private key for running user services into Kubernetes
k8s_services_cert: |
  ----BEGIN CERTIFICATE----
  - Your certificate here -
  -----END CERTIFICATE-----
k8s_services_cert_key: |
  ----BEGIN PRIVATE KEY----
  - Your private key here -
  -----END PRIVATE KEY-----

# Dashboard image
k8s_dashboard_image: gcr.io/google_containers/kubernetes-dashboard-amd64
k8s_dashboard_image_tag: v1.6.0

# KubeDNS images
k8s_kubedns_image: gcr.io/google_containers/k8s-dns-kube-dns-amd64
k8s_kubedns_image_tag: 1.14.1
k8s_kubednsmasq_image: gcr.io/google_containers/k8s-dns-dnsmasq-nanny-amd64
k8s_kubednsmasq_image_tag: 1.14.1
k8s_kubednssidecar_image: gcr.io/google_containers/k8s-dns-sidecar-amd64
k8s_kubednssidecar_image_tag: 1.14.1
k8s_cluster_autoscaler_image: gcr.io/google_containers/cluster-proportional-autoscaler-amd64
k8s_cluster_autoscaler_image_tag: 1.1.1

# Nginx Ingress controller images
k8s_defaultbackend_image: gcr.io/google_containers/defaultbackend
k8s_defaultbackend_image_tag: 1.3
k8s_echoserver_image: gcr.io/google_containers/echoserver
k8s_echoserver_image_tag: 1.4
k8s_nginx_ingress_controller_image: takama/nginx-ingress-controller
k8s_nginx_ingress_controller_image_tag: 0.8.3

# Heapster images
k8s_heapster_image: gcr.io/google_containers/heapster-amd64
k8s_heapster_image_tag: v1.3.0
k8s_heapster_addon_resizer_image: gcr.io/google_containers/addon-resizer
k8s_heapster_addon_resizer_image_tag: 1.7
k8s_heapster_influxdb_image: gcr.io/google_containers/heapster-influxdb-amd64
k8s_heapster_influxdb_image_tag: v1.1.1
k8s_heapster_grafana_image: gcr.io/google_containers/heapster-grafana-amd64
k8s_heapster_grafana_image_tag: v4.0.2

# Helm Tiller image
k8s_helm_tiller_image: gcr.io/kubernetes-helm/tiller
k8s_helm_tiller_image_tag: v{{ helm_version }}

# Kube Registry image
k8s_kube_registry_image: registry
k8s_kube_registry_image_tag: 2.5.1

# Cockroach DB images
k8s_cockroachdb_image: cockroachdb/cockroach
k8s_cockroachdb_image_tag: v1.0.1
k8s_cockroachdb_init_image: webdeva/cockroach-init
k8s_cockroachdb_init_image_tag: 0.0.2

# Docker registry secrets. To get it we should do some strange things, but it needs anyway.
# First of all, we should prepare access token for `Docker Registry`
# docker run --rm --entrypoint htpasswd registry:2 -Bbn <user> <password> | base64
k8s_docker_registry_token: 'docker registry token here'

# Second, we should create docker config with auth code, auth token and there are two ways:
#
# Solution 1:
# (without login to docker registry)
# kubectl create secret docker-registry my-secret --docker-username=user --docker-password='password' \
# --docker-email 'docker@docker.com' --docker-server=<docker_registry_host> --dry-run -o yaml
#
# grab hash in field `data.dockercfg` from output result of the command above
# echo '<hash from data.dockercfg>' | base64 --decode
#
# grab `auth code` from output result of the command above
#
# create `.docker/config.json`
# {
#   "auths": {
#     "<docker_registry_host>": {
#       "auth": "<auth_code_from_previous_command>"
#     }
#   }
# }
#
# Solution 2:
# (need real login to docker registry)
# docker login -u=<user> -p=<password> <docker_registry_host:port>

# Enter auth code from `.docker/config.json` here
k8s_docker_registry_auth_code: 'docker registry auth code here'

# Enter result of `cat .docker/config.json | base64` here
k8s_docker_registry_auth_token: 'docker registry auth config token'

# Persistent volume
k8s_volume_reclaim_policy: Retain

# Heapster parameters
k8s_heapster_base_metrics_memory: "140Mi"
k8s_heapster_base_metrics_cpu: "80m"
k8s_heapster_base_eventer_memory: "190Mi"
k8s_heapster_metrics_memory_per_node: 4
k8s_heapster_metrics_cpu_per_node: 0.5
k8s_heapster_eventer_memory_per_node: 500
k8s_heapster_num_nodes: 3
k8s_heapster_nanny_memory_per_node: 200
k8s_heapster_nanny_memory: '{% if k8s_heapster_num_nodes >= 0 %} {{ (90 * 1024 + k8s_heapster_num_nodes * k8s_heapster_nanny_memory_per_node)|string + "Ki" }} {% else %} "90Mi" {% endif %}'
